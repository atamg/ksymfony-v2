name: Release — Terraform

on:
  push:
    tags: ['v*']
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  TF_STATE_BUCKET: ${{ vars.TF_STATE_BUCKET }}

jobs:
  infra:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: infra/terraform

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v5
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ vars.TF_AWS_ROLE_ARN }}
          mask-aws-account-id: true

      - name: Ensure S3 bucket exists (state)
        run: |
          set -euo pipefail
          if ! aws s3api head-bucket --bucket "$TF_STATE_BUCKET" 2>/dev/null; then
            aws s3api create-bucket \
              --bucket "$TF_STATE_BUCKET" \
              --region "$AWS_REGION" \
              --create-bucket-configuration LocationConstraint="$AWS_REGION"
            aws s3api put-bucket-versioning --bucket "$TF_STATE_BUCKET" \
              --versioning-configuration Status=Enabled
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.2

      - name: Terraform init (S3 backend)
        run: |
          terraform init \
            -backend-config="bucket=${TF_STATE_BUCKET}" \
            -backend-config="key=ksymfony/terraform.tfstate" \
            -backend-config="region=${AWS_REGION}" \
            -backend-config="encrypt=true"

      - name: Terraform validate
        run: terraform validate

      - name: Terraform plan (detailed exit code)
        id: plan
        env:
          TF_VAR_project_name: ksymfony-v2
          TF_VAR_aws_region: ${{ env.AWS_REGION }}
          TF_VAR_vpc_id: ${{ vars.TF_VAR_VPC_ID }}
          TF_VAR_subnet_id: ${{ vars.TF_VAR_SUBNET_ID }}
          TF_VAR_key_pair_name: ${{ vars.TF_VAR_KEYPAIR }}
          TF_VAR_user_allowed_ip_list: ${{ vars.TF_VAR_USER_ALLOWED_IP_LIST }}
          TF_VAR_extra_ssh_public_keys: ${{ vars.TF_VAR_EXTRA_SSH_PUBLIC_KEYS }}
          TF_VAR_github_owner: ${{ vars.TF_VAR_GITHUB_OWNER }}
          TF_VAR_github_repo: ${{ vars.TF_VAR_GITHUB_REPO }}
          TF_VAR_open_http_80: ${{ vars.TF_VAR_OPEN_HTTP_80 }}
          TF_VAR_open_https_443: ${{ vars.TF_VAR_OPEN_HTTPS_443 }}
          TF_VAR_enable_ssh: ${{ vars.TF_VAR_ENABLE_SSH }}
        run: |
          set -euo pipefail
          terraform plan -detailed-exitcode -out=tfplan.bin || code=$?
          echo "exitcode=${code:-0}" >> $GITHUB_OUTPUT

      - name: Terraform apply
        run: terraform apply -no-color -auto-approve tfplan.bin

      - name: Outputs summary
        run: |
          echo "## Terraform Outputs" >> $GITHUB_STEP_SUMMARY
          terraform output -json | jq -r 'to_entries[] | "- \(.key): \(.value.value)"' >> $GITHUB_STEP_SUMMARY || echo "- No outputs"

# Release — Terraform
# Deploys infrastructure using Terraform on tag push or manual trigger.
# - Configures AWS credentials via OIDC
# - Ensures S3 bucket for state exists
# - Initializes, validates, plans, and applies Terraform
# - Summarizes outputs